name: Publish Python Package

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      release_target:
        description: 'Where to publish'
        type: choice
        default: pypi
        options:
          - pypi
          - testpypi
      release_version:
        description: 'Version to publish (e.g., 0.3.1). Required when manually dispatched.'
        required: false
        type: string

permissions:
  contents: read
  id-token: write

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine release version
        id: release
        env:
          GH_EVENT_NAME: ${{ github.event_name }}
          TAG_NAME: ${{ github.ref_name }}
          MANUAL_VERSION: ${{ github.event.inputs.release_version }}
        run: |
          set -euo pipefail
          if [[ "${GH_EVENT_NAME}" == "push" ]]; then
            VERSION="${TAG_NAME#v}"
          else
            VERSION="${MANUAL_VERSION}"
          fi

          if [[ -z "${VERSION}" ]]; then
            echo "Release version is required (tag name or workflow input)." >&2
            exit 1
          fi

          echo "release_version=${VERSION}" >> "${GITHUB_OUTPUT}"

      - name: Update project version
        env:
          RELEASE_VERSION: ${{ steps.release.outputs.release_version }}
        run: |
          set -euo pipefail
          if ! grep -q '^version = "' pyproject.toml; then
            echo 'version field not found in pyproject.toml' >&2
            exit 1
          fi
          tmp_file=$(mktemp)
          grep -vx 'version = ".*"' pyproject.toml > "${tmp_file}"
          sed -i "0,/^\[project\]$/a version = \"${RELEASE_VERSION}\"" "${tmp_file}"
          mv "${tmp_file}" pyproject.toml

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine

      - name: Build distributions
        run: python -m build

      - name: Check metadata
        run: twine check dist/*

      - name: Publish to PyPI
        if: github.event_name == 'push' || github.event.inputs.release_target == 'pypi'
        uses: pypa/gh-action-pypi-publish@release/v1

      - name: Publish to TestPyPI
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.release_target == 'testpypi'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
