name: '💬 Gemini CLI (日本語版)'

on:
  issues:
    types:
      - 'opened'
  pull_request_review_comment:
    types:
      - 'created'
  pull_request_review:
    types:
      - 'submitted'
  issue_comment:
    types:
      - 'created'

concurrency:
  group: '${{ github.workflow }}-${{ github.event.issue.number }}'
  cancel-in-progress: |-
    ${{ github.event.sender.type == 'User' && ( github.event.issue.author_association == 'OWNER' || github.event.issue.author_association == 'MEMBER' || github.event.issue.author_association == 'COLLABORATOR') }}

defaults:
  run:
    shell: 'bash'

permissions:
  contents: 'write'
  id-token: 'write'
  pull-requests: 'write'
  issues: 'write'

jobs:
  gemini-cli-jp:
    if: |-
      github.event_name == 'workflow_dispatch' ||
      (
        github.event_name == 'issues' && github.event.action == 'opened' &&
        (contains(github.event.issue.body, '@gemini-jp-cli') || contains(github.event.issue.body, '@gemini-cli-jp')) &&
        !contains(github.event.issue.body, '@gemini-jp-cli /review') &&
        !contains(github.event.issue.body, '@gemini-jp-cli /triage') &&
        (
          github.event.repository.private == true ||
          contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.issue.author_association)
        )
      ) ||
      (
        (
          github.event_name == 'issue_comment' ||
          github.event_name == 'pull_request_review_comment'
        ) &&
        (contains(github.event.comment.body, '@gemini-jp-cli') || contains(github.event.comment.body, '@gemini-cli-jp')) &&
        !contains(github.event.comment.body, '@gemini-jp-cli /review') &&
        !contains(github.event.comment.body, '@gemini-jp-cli /triage') &&
        (
          github.event.repository.private == true ||
          contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.comment.author_association)
        )
      ) ||
      (
        github.event_name == 'pull_request_review' &&
        (contains(github.event.review.body, '@gemini-jp-cli') || contains(github.event.review.body, '@gemini-cli-jp')) &&
        !contains(github.event.review.body, '@gemini-jp-cli /review') &&
        !contains(github.event.review.body, '@gemini-jp-cli /triage') &&
        (
          github.event.repository.private == true ||
          contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.review.author_association)
        )
      )
    timeout-minutes: 10
    runs-on: 'ubuntu-latest'
    steps:
      - name: '🐛 デバッグ: イベント情報を出力'
        run: |-
          echo "=== イベント詳細 ==="
          echo "Event Name: ${{ github.event_name }}"
          echo "Event Action: ${{ github.event.action }}"
          echo "Repository: ${{ github.repository }}"
          echo "Actor: ${{ github.actor }}"
          echo ""
          echo "=== Issue情報 ==="
          echo "Issue Number: ${{ github.event.issue.number || 'N/A' }}"
          echo "Issue Title: ${{ github.event.issue.title || 'N/A' }}"
          echo "Issue Body Length: $(echo '${{ github.event.issue.body || '' }}' | wc -c)"
          echo "Issue Author: ${{ github.event.issue.user.login || 'N/A' }}"
          echo "Issue Association: ${{ github.event.issue.author_association || 'N/A' }}"
          echo ""
          echo "=== Comment情報 ==="
          echo "Comment Body Length: $(echo '${{ github.event.comment.body || '' }}' | wc -c)"
          echo "Comment Author: ${{ github.event.comment.user.login || 'N/A' }}"
          echo "Comment Association: ${{ github.event.comment.author_association || 'N/A' }}"
          echo ""
          echo "=== PR Review情報 ==="
          echo "Review Body Length: $(echo '${{ github.event.review.body || '' }}' | wc -c)"
          echo "PR Number: ${{ github.event.pull_request.number || 'N/A' }}"
          echo ""
          echo "=== 完全なイベントペイロード ==="
          echo '${{ toJSON(github.event) }}'

      - name: 'GitHub App トークンを生成'
        id: 'generate_token'
        if: |-
          ${{ vars.APP_ID }}
        uses: 'actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e' # ratchet:actions/create-github-app-token@v2
        with:
          app-id: '${{ vars.APP_ID }}'
          private-key: '${{ secrets.APP_PRIVATE_KEY }}'

      - name: 'イベントからコンテキストを取得'
        id: 'get_context'
        uses: 'actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea'
        with:
          github-token: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          script: |-
            console.log('=== コンテキスト取得開始 ===');
            console.log(`Event Name: ${context.eventName}`);
            console.log(`Event Action: ${context.payload.action || 'N/A'}`);
            console.log(`Repository: ${context.repo.owner}/${context.repo.repo}`);
            console.log(`Actor: ${context.actor}`);

            let userRequest = '';
            let issueNumber = '';
            let isPR = false;
            let rawBody = '';
            let issueTitle = '';

            try {
              if (context.eventName === 'issues') {
                rawBody = context.payload.issue.body || '';
              } else if (context.eventName === 'issue_comment') {
                rawBody = context.payload.comment.body || '';
              } else if (context.eventName === 'pull_request_review') {
                rawBody = context.payload.review.body || '';
              } else if (context.eventName === 'pull_request_review_comment') {
                rawBody = context.payload.comment.body || '';
              }

              if (context.eventName === 'issues' || context.eventName === 'issue_comment') {
                issueNumber = context.payload.issue.number.toString();
                issueTitle = context.payload.issue.title || '';
                if (context.payload.issue.pull_request) {
                  isPR = true;
                }
              } else if (context.eventName === 'pull_request_review' || context.eventName === 'pull_request_review_comment') {
                issueNumber = context.payload.pull_request.number.toString();
                issueTitle = context.payload.pull_request.title || '';
                isPR = true;
              }

              userRequest = rawBody;

              // @gemini-jp-cli or @gemini-cli-jp を探して削除
              const mentionJpCli = '@gemini-jp-cli';
              const mentionCliJp = '@gemini-cli-jp';
              
              let mentionIndex = userRequest.indexOf(mentionJpCli);
              if (mentionIndex !== -1) {
                userRequest = userRequest.substring(mentionIndex + mentionJpCli.length).trim();
              } else {
                mentionIndex = userRequest.indexOf(mentionCliJp);
                if (mentionIndex !== -1) {
                  userRequest = userRequest.substring(mentionIndex + mentionCliJp.length).trim();
                }
              }
              
              core.setOutput('user_request', userRequest);
              core.setOutput('issue_number', issueNumber);
              core.setOutput('issue_title', issueTitle);
              core.setOutput('is_pr', isPR.toString());
              core.setOutput('raw_body', rawBody);

            } catch (error) {
              core.setFailed(`コンテキスト取得中にエラーが発生: ${error.message}`);
              core.setOutput('user_request', 'エラーが発生しました');
              core.setOutput('issue_number', '0');
              core.setOutput('issue_title', 'エラー');
              core.setOutput('is_pr', 'false');
              core.setOutput('raw_body', '');
            }

      - name: '🐛 デバッグ: 取得したコンテキストを確認'
        env:
          USER_REQUEST: ${{ steps.get_context.outputs.user_request }}
          ISSUE_NUMBER: ${{ steps.get_context.outputs.issue_number }}
          ISSUE_TITLE: ${{ steps.get_context.outputs.issue_title }}
          IS_PR: ${{ steps.get_context.outputs.is_pr }}
          RAW_BODY: ${{ steps.get_context.outputs.raw_body }}
        run: |
          echo "=== 取得されたコンテキスト ==="
          echo "User Request: '$USER_REQUEST'"
          echo "Issue Number: '$ISSUE_NUMBER'"
          echo "Issue Title: '$ISSUE_TITLE'"
          echo "Is PR: '$IS_PR'"
          echo "Raw Body: '$RAW_BODY'"

      - name: 'コミット用のgitユーザーを設定'
        run: |-
          git config --global user.name 'gemini-cli-jp[bot]'
          git config --global user.email 'gemini-cli-jp[bot]@users.noreply.github.com'

      - name: 'PRブランチをチェックアウト'
        if: |-
          ${{  steps.get_context.outputs.is_pr == 'true' }}
        uses: 'actions/checkout@v4'
        with:
          token: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          repository: '${{ github.repository }}'
          ref: 'refs/pull/${{ steps.get_context.outputs.issue_number }}/head'
          fetch-depth: 0

      - name: 'メインブランチをチェックアウト'
        if: |-
          ${{  steps.get_context.outputs.is_pr == 'false' }}
        uses: 'actions/checkout@v4'
        with:
          token: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          repository: '${{ github.repository }}'
          fetch-depth: 0

      - name: 'リクエストを確認'
        env:
          GITHUB_ACTOR: '${{ github.actor }}'
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          ISSUE_NUMBER: '${{ steps.get_context.outputs.issue_number }}'
          REPOSITORY: '${{ github.repository }}'
          USER_REQUEST: '${{ steps.get_context.outputs.user_request }}'
          RAW_BODY: '${{ steps.get_context.outputs.raw_body }}'
        run: |-
          set -euo pipefail
          MESSAGE="@${GITHUB_ACTOR} リクエストを受け取りました。今から作業を開始します！ 🤖

          デバッグ情報:
          - ユーザーリクエスト: '${USER_REQUEST}'
          - Issue/PR番号: ${ISSUE_NUMBER}
          - イベント種類: ${{ github.event_name }}
          - 生データ: '${RAW_BODY}'"
          
          if [[ -n "${MESSAGE}" ]]; then
            if [[ "${{ steps.get_context.outputs.is_pr }}" == "true" ]]; then
              gh pr comment "${ISSUE_NUMBER}" \
                --body "${MESSAGE}" \
                --repo "${REPOSITORY}"
            else
              gh issue comment "${ISSUE_NUMBER}" \
                --body "${MESSAGE}" \
                --repo "${REPOSITORY}"
            fi
          fi

      - name: '説明を取得'
        id: 'get_description'
        uses: 'actions/github-script@v7'
        with:
          github-token: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          script: |-
            const isPR = '${{ steps.get_context.outputs.is_pr }}' === 'true';
            const issueNumber = parseInt('${{ steps.get_context.outputs.issue_number }}');
            let description = '';
            try {
              if (isPR) {
                const { data: pr } = await github.rest.pulls.get({
                  owner: context.repo.owner, repo: context.repo.repo, pull_number: issueNumber
                });
                description = pr.body || '';
              } else {
                const { data: issue } = await github.rest.issues.get({
                  owner: context.repo.owner, repo: context.repo.repo, issue_number: issueNumber
                });
                description = issue.body || '';
              }
            } catch (error) {
              description = `${isPR ? 'PR' : 'Issue'}情報の取得に失敗: ${error.message}`;
            }
            core.setOutput('description', description);

      - name: 'コメントを取得'
        id: 'get_comments'
        uses: 'actions/github-script@v7'
        with:
          github-token: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          script: |-
            const issueNumber = parseInt('${{ steps.get_context.outputs.issue_number }}');
            let comments = '';
            try {
              const { data: commentsList } = await github.rest.issues.listComments({
                owner: context.repo.owner, repo: context.repo.repo, issue_number: issueNumber
              });
              comments = commentsList.map(comment => `${comment.user.login}: ${comment.body}`).join('\n');
            } catch (error) {
              comments = `コメントの取得に失敗: ${error.message}`;
            }
            core.setOutput('comments', comments);

      - name: '🐛 デバッグ: 最終データを確認'
        env:
          USER_REQUEST: ${{ steps.get_context.outputs.user_request }}
          ISSUE_NUMBER: ${{ steps.get_context.outputs.issue_number }}
          ISSUE_TITLE: ${{ steps.get_context.outputs.issue_title }}
          DESCRIPTION: ${{ steps.get_description.outputs.description }}
          COMMENTS: ${{ steps.get_comments.outputs.comments }}
          IS_PR: ${{ steps.get_context.outputs.is_pr }}
        run: |
          echo "=== 最終データ確認 ==="
          echo "User Request: '$USER_REQUEST'"
          echo "Issue Number: '$ISSUE_NUMBER'"
          echo "Issue Title: '$ISSUE_TITLE'"
          echo "Description Length: $(echo "$DESCRIPTION" | wc -c)"
          echo "Comments Length: $(echo "$COMMENTS" | wc -c)"
          echo "Is PR: '$IS_PR'"

      - name: 'Geminiを実行'
        id: 'run_gemini'
        uses: 'google-github-actions/run-gemini-cli@v0'
        env:
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          REPOSITORY: '${{ github.repository }}'
          USER_REQUEST: '${{ steps.get_context.outputs.user_request }}'
          ISSUE_NUMBER: '${{ steps.get_context.outputs.issue_number }}'
          IS_PR: '${{ steps.get_context.outputs.is_pr }}'
        with:
          gemini_api_key: '${{ secrets.GEMINI_API_KEY }}'
          gcp_workload_identity_provider: '${{ vars.GCP_WIF_PROVIDER }}'
          gcp_project_id: '${{ vars.GOOGLE_CLOUD_PROJECT }}'
          gcp_location: '${{ vars.GOOGLE_CLOUD_LOCATION }}'
          gcp_service_account: '${{ vars.SERVICE_ACCOUNT_EMAIL }}'
          use_vertex_ai: '${{ vars.GOOGLE_GENAI_USE_VERTEXAI }}'
          use_gemini_code_assist: '${{ vars.GOOGLE_GENAI_USE_GCA }}'
          settings: |-
            {
              "debug": true,
              "maxSessionTurns": 50,
              "telemetry": { "enabled": false }
            }
          prompt: |-
            ## デバッグ情報
            - **生のBody**: `${{ steps.get_context.outputs.raw_body }}`
            - **処理されたユーザーリクエスト**: `${{ steps.get_context.outputs.user_request }}`
            ## 役割
            あなたはGitHubワークフローのCLIインターフェース経由で呼び出される親切なAIアシスタントです。リポジトリとやり取りし、ユーザーに応答するためのツールを使用できます。
            ## コンテキスト
            - **リポジトリ**: `${{ github.repository }}`
            - **トリガーイベント**: `${{ github.event_name }}`
            - **Issue/PR番号**: `${{ steps.get_context.outputs.issue_number }}`
            - **Issue/PRタイトル**: `${{ steps.get_context.outputs.issue_title }}`
            - **これはPRですか？**: `${{ steps.get_context.outputs.is_pr }}`
            - **Issue/PRの説明**:
            `${{ steps.get_description.outputs.description }}`
            - **コメント**:
            `${{ steps.get_comments.outputs.comments }}`
            ## ユーザーリクエスト
            ユーザーから以下のリクエストが送信されました：
            `${{ steps.get_context.outputs.user_request }}`
            ## 指示
            あなたは熟練したソフトウェアエンジニアとして振る舞い、提供されたツールを使用してユーザーのリクエストを解決してください。
            - **計画の提示**: 最初に、問題を解決するためのステップをチェックリスト形式でコメントしてください。(`gh issue comment` または `gh pr comment` を使用)
            - **ブランチ管理**: `main`ブランチには直接コミットしないでください。Issueの場合は `issue/${{ steps.get_context.outputs.issue_number }}/<短い説明>` のような新しいブランチを作成してください。PRの場合は、チェックアウト済みのブランチで作業してください。
            - **コードの変更**: `write_file` ツールを使用してコードを修正します。
            - **コミットとプッシュ**: 変更をコミットし、適切なブランチにプッシュしてください。
            - **応答**: 完了したら、行った変更の概要をコメントで報告してください。
            - **言語**: すべての応答は日本語で行ってください。
