- name: Create Zenn article file
        env:
          TAG: "${{ steps.ctx.outputs.tag }}"
          REPOSITORY: "${{ github.repository }}"
          ZENN_CONTENT: "${{ steps.zenn_article.outputs.summary }}"
          GITHUB_TOKEN: "${{ secrets.ZENN_REPO_TOKEN }}"
          HEADER_IMAGE_URL: "${{ steps.header.outputs.raw_url }}"
          HEADER_IMAGE_NAME: "${{ steps.header.outputs.image_name }}"
        run: |
          set -euo pipefail
          # リポジトリ名からファイル名を生成
          REPO_NAME="${REPOSITORY##*/}"  # Remove owner/ prefix
          TAG_CLEAN="${TAG#v}"  # Remove 'v' prefix if present
          TIMESTAMP=$(date +%Y%m%d)
          # ファイル名（拡張子を除く）はZenn記事のslugとなるため、制約に合わせて生成
          RAW_SLUG="${TIMESTAMP}-${REPO_NAME}-${TAG_CLEAN}-release"
          RAW_SLUG="${RAW_SLUG,,}"  # 小文字化
          # 使用可能文字（a-z0-9_-）以外をハイフンに置換し、ハイフン・アンダースコアの連続を整理
          SLUG=$(echo "${RAW_SLUG}" \
            | sed 's/[^a-z0-9_-]/-/g' \
            | sed -E 's/-{2,}/-/g' \
            | sed -E 's/_{2,}/_/g' \
            | sed -E 's/^[-_]+//; s/[-_]+$//')
          # 生成結果が空の場合は日付ベースのslugを使用
          if [[ -z "${SLUG}" ]]; then
            SLUG="${TIMESTAMP}-release"
          fi
          # 最大文字数（50文字）を超える場合はトリミングし、末尾のハイフン/アンダースコアを除去
          if [[ ${#SLUG} -gt 50 ]]; then
            SLUG="${SLUG:0:50}"
            SLUG=$(echo "${SLUG}" | sed -E 's/[-_]+$//')
          fi
          # 最小文字数（12文字）に満たない場合は許容文字でパディング
          while [[ ${#SLUG} -lt 12 ]]; do
            SLUG="${SLUG}x"
          done
          # 最終的なslugが制約を満たすか検証
          if [[ ! "${SLUG}" =~ ^[a-z0-9_-]{12,50}$ ]]; then
            echo "生成されたslug '${SLUG}' が制約を満たしません" >&2
            exit 1
          fi
          FILENAME="${SLUG}.md"
          FILEPATH="zenn-repo/articles/${FILENAME}"
          echo "Creating Zenn article: ${FILEPATH}"
          
          # articlesディレクトリが存在しない場合は作成
          mkdir -p "zenn-repo/articles"
          
          # Zenn記事を作成（ヘッダー画像のMarkdown挿入はGeminiの出力に任せる）。
          # 生成物がコードフェンスで囲まれている場合は中身のみ抽出する。
          python3 -c "
import os
import pathlib
import re

filepath = os.environ['FILEPATH']
raw_content = os.environ.get('ZENN_CONTENT', '')

# 正規化（改行コードをLFへ）。
normalized = raw_content.replace('\r\n', '\n').replace('\r', '\n')

# 先頭の空白を保持したままコードフェンスの有無を判定する。
leading_len = len(normalized) - len(normalized.lstrip())
leading = normalized[:leading_len]
stripped = normalized[leading_len:]

processed = normalized
mode = 'as-is'

match = re.match(r'^```(?:markdown)?\s*\n?', stripped, flags=re.IGNORECASE)
if match:
    body = stripped[match.end():]
    lines = body.splitlines(keepends=True)
    for idx in range(len(lines) - 1, -1, -1):
        if lines[idx].strip() == '```':
            del lines[idx]
            break
    processed = leading + ''.join(lines)
    mode = 'removed outer fence'

if not processed.endswith('\n'):
    processed += '\n'

pathlib.Path(filepath).write_text(processed, encoding='utf-8')
print(f'Saved Zenn content ({mode}), {len(processed)} characters -> {filepath}')
          "

          echo "✅ Created Zenn article: ${FILENAME}"
          echo "File size: $(wc -c < "${FILEPATH}") bytes"
          
          # 出力変数にファイル名を設定
          echo "zenn_filename=${FILENAME}" >> "$GITHUB_OUTPUT"
          echo "zenn_filepath=${FILEPATH}" >> "$GITHUB_OUTPUT"
