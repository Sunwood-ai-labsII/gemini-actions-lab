name: '💬 Gemini CLI'

on:
  pull_request_review_comment:
    types:
      - 'created'
  pull_request_review:
    types:
      - 'submitted'
  issue_comment:
    types:
      - 'created'
  issues:
    types:
      - 'opened'

concurrency:
  group: '${{ github.workflow }}-${{ github.event.issue.number }}'
  cancel-in-progress: |-
    ${{ github.event.sender.type == 'User' && ( github.event.issue.author_association == 'OWNER' || github.event.issue.author_association == 'MEMBER' || github.event.issue.author_association == 'COLLABORATOR') }}

defaults:
  run:
    shell: 'bash'

permissions:
  contents: 'write'
  id-token: 'write'
  pull-requests: 'write'
  issues: 'write'

jobs:
  gemini-cli:
    # This condition seeks to ensure the action is only run when it is triggered by a trusted user.
    # For private repos, users who have access to the repo are considered trusted.
    # For public repos, users who members, owners, or collaborators are considered trusted.
    if: |-
      github.event_name == 'workflow_dispatch' ||
      (
        github.event_name == 'issues' && github.event.action == 'opened' &&
        contains(github.event.issue.body, '@gemini-cli') &&
        !contains(github.event.issue.body, '@gemini-cli /review') &&
        !contains(github.event.issue.body, '@gemini-cli /triage') &&
        (
          github.event.repository.private == true ||
          contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.issue.author_association)
        )
      ) ||
      (
        (
          github.event_name == 'issue_comment' ||
          github.event_name == 'pull_request_review_comment'
        ) &&
        contains(github.event.comment.body, '@gemini-cli') &&
        !contains(github.event.comment.body, '@gemini-cli /review') &&
        !contains(github.event.comment.body, '@gemini-cli /triage') &&
        (
          github.event.repository.private == true ||
          contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.comment.author_association)
        )
      ) ||
      (
        github.event_name == 'pull_request_review' &&
        contains(github.event.review.body, '@gemini-cli') &&
        !contains(github.event.review.body, '@gemini-cli /review') &&
        !contains(github.event.review.body, '@gemini-cli /triage') &&
        (
          github.event.repository.private == true ||
          contains(fromJSON('["OWNER", "MEMBER", "COLLABORATOR"]'), github.event.review.author_association)
        )
      )
    timeout-minutes: 10
    runs-on: 'ubuntu-latest'
    steps:
      - name: 'Generate GitHub App Token'
        id: 'generate_token'
        if: |-
          ${{ vars.APP_ID }}
        uses: 'actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e' # ratchet:actions/create-github-app-token@v2
        with:
          app-id: '${{ vars.APP_ID }}'
          private-key: '${{ secrets.APP_PRIVATE_KEY }}'

      - name: 'Get context from event'
        id: 'get_context'
        env:
          EVENT_NAME: '${{ github.event_name }}'
          EVENT_PAYLOAD: '${{ toJSON(github.event) }}'
        run: |-
          set -euo pipefail

          USER_REQUEST=""
          ISSUE_NUMBER=""
          IS_PR="false"

          if [[ "${EVENT_NAME}" == "issues" ]]; then
            USER_REQUEST=$(echo "${EVENT_PAYLOAD}" | jq -r .issue.body)
            ISSUE_NUMBER=$(echo "${EVENT_PAYLOAD}" | jq -r .issue.number)
          elif [[ "${EVENT_NAME}" == "issue_comment" ]]; then
            USER_REQUEST=$(echo "${EVENT_PAYLOAD}" | jq -r .comment.body)
            ISSUE_NUMBER=$(echo "${EVENT_PAYLOAD}" | jq -r .issue.number)
            if [[ $(echo "${EVENT_PAYLOAD}" | jq -r .issue.pull_request) != "null" ]]; then
              IS_PR="true"
            fi
          elif [[ "${EVENT_NAME}" == "pull_request_review" ]]; then
            USER_REQUEST=$(echo "${EVENT_PAYLOAD}" | jq -r .review.body)
            ISSUE_NUMBER=$(echo "${EVENT_PAYLOAD}" | jq -r .pull_request.number)
            IS_PR="true"
          elif [[ "${EVENT_NAME}" == "pull_request_review_comment" ]]; then
            USER_REQUEST=$(echo "${EVENT_PAYLOAD}" | jq -r .comment.body)
            ISSUE_NUMBER=$(echo "${EVENT_PAYLOAD}" | jq -r .pull_request.number)
            IS_PR="true"
          fi

          # Clean up user request
          USER_REQUEST=$(echo "${USER_REQUEST}" | sed 's/.*@gemini-cli//' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

          # Write outputs safely (supporting newlines/special chars)
          {
            echo 'user_request<<EOF'
            echo "${USER_REQUEST}"
            echo 'EOF'
            echo "issue_number=${ISSUE_NUMBER}"
            echo "is_pr=${IS_PR}"
          } >> "${GITHUB_OUTPUT}"

      - name: 'Set up git user for commits'
        run: |-
          git config --global user.name 'gemini-cli[bot]'
          git config --global user.email 'gemini-cli[bot]@users.noreply.github.com'

      - name: 'Checkout PR branch'
        if: |-
          ${{  steps.get_context.outputs.is_pr == 'true' }}
        uses: 'actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683' # ratchet:actions/checkout@v4
        with:
          token: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          repository: '${{ github.repository }}'
          ref: 'refs/pull/${{ steps.get_context.outputs.issue_number }}/head'
          fetch-depth: 0

      - name: 'Checkout main branch'
        if: |-
          ${{  steps.get_context.outputs.is_pr == 'false' }}
        uses: 'actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683' # ratchet:actions/checkout@v4
        with:
          token: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          repository: '${{ github.repository }}'
          fetch-depth: 0

      - name: 'Acknowledge request'
        env:
          GITHUB_ACTOR: '${{ github.actor }}'
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          ISSUE_NUMBER: '${{ steps.get_context.outputs.issue_number }}'
          REPOSITORY: '${{ github.repository }}'
          REQUEST_TYPE: '${{ steps.get_context.outputs.request_type }}'
        run: |-
          set -euo pipefail
          MESSAGE="@${GITHUB_ACTOR} I've received your request and I'm working on it now! 🤖"
          if [[ -n "${MESSAGE}" ]]; then
            gh issue comment "${ISSUE_NUMBER}" \
              --body "${MESSAGE}" \
              --repo "${REPOSITORY}"
          fi

      - name: 'Get description'
        id: 'get_description'
        env:
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          IS_PR: '${{ steps.get_context.outputs.is_pr }}'
          ISSUE_NUMBER: '${{ steps.get_context.outputs.issue_number }}'
        run: |-
          set -euo pipefail
          if [[ "${IS_PR}" == "true" ]]; then
            DESCRIPTION=$(gh pr view "${ISSUE_NUMBER}" --json body --template '{{.body}}')
          else
            DESCRIPTION=$(gh issue view "${ISSUE_NUMBER}" --json body --template '{{.body}}')
          fi
          {
            echo "description<<EOF"
            echo "${DESCRIPTION}"
            echo "EOF"
          } >> "${GITHUB_OUTPUT}"

      - name: 'Get comments'
        id: 'get_comments'
        env:
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          IS_PR: '${{ steps.get_context.outputs.is_pr }}'
          ISSUE_NUMBER: '${{ steps.get_context.outputs.issue_number }}'
        run: |-
          set -euo pipefail
          if [[ "${IS_PR}" == "true" ]]; then
            COMMENTS=$(gh pr view "${ISSUE_NUMBER}" --json comments --template '{{range .comments}}{{.author.login}}: {{.body}}{{"\n"}}{{end}}')
          else
            COMMENTS=$(gh issue view "${ISSUE_NUMBER}" --json comments --template '{{range .comments}}{{.author.login}}: {{.body}}{{"\n"}}{{end}}')
          fi
          {
            echo "comments<<EOF"
            echo "${COMMENTS}"
            echo "EOF"
          } >> "${GITHUB_OUTPUT}"

      - name: 'Read prompt from file (JA)'
        id: 'read_prompt'
        env:
          REPOSITORY: '${{ github.repository }}'
          EVENT_NAME: '${{ github.event_name }}'
          ISSUE_NUMBER: '${{ steps.get_context.outputs.issue_number }}'
          IS_PR: '${{ steps.get_context.outputs.is_pr }}'
          DESCRIPTION: '${{ steps.get_description.outputs.description }}'
          COMMENTS: '${{ steps.get_comments.outputs.comments }}'
          USER_REQUEST: '${{ steps.get_context.outputs.user_request }}'
          GITHUB_WORKSPACE: '${{ github.workspace }}'
        run: |-
          set -euo pipefail
          TEMPLATE_PATH=".github/prompts/gemini-cli_prompt.ja.md"
          if [[ ! -f "${TEMPLATE_PATH}" ]]; then
            echo "Prompt template not found: ${TEMPLATE_PATH}" >&2
            exit 1
          fi
          # Robust variable substitution using envsubst (handles braces/newlines safely)
          # Limit substitution to specific variables to avoid accidental replacements
          EXPANDED=$(envsubst '${REPOSITORY} ${EVENT_NAME} ${ISSUE_NUMBER} ${IS_PR} ${DESCRIPTION} ${COMMENTS} ${USER_REQUEST} ${GITHUB_WORKSPACE}' < "${TEMPLATE_PATH}")
          {
            echo "prompt<<EOF"
            echo "${EXPANDED}"
            echo "EOF"
          } >> "${GITHUB_OUTPUT}"

      - name: 'Run Gemini'
        id: 'run_gemini'
        uses: 'google-github-actions/run-gemini-cli@v0'
        env:
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          REPOSITORY: '${{ github.repository }}'
          USER_REQUEST: '${{ steps.get_context.outputs.user_request }}'
          ISSUE_NUMBER: '${{ steps.get_context.outputs.issue_number }}'
          IS_PR: '${{ steps.get_context.outputs.is_pr }}'
        with:
          gemini_api_key: '${{ secrets.GEMINI_API_KEY }}'
          gcp_workload_identity_provider: '${{ vars.GCP_WIF_PROVIDER }}'
          gcp_project_id: '${{ vars.GOOGLE_CLOUD_PROJECT }}'
          gcp_location: '${{ vars.GOOGLE_CLOUD_LOCATION }}'
          gcp_service_account: '${{ vars.SERVICE_ACCOUNT_EMAIL }}'
          use_vertex_ai: '${{ vars.GOOGLE_GENAI_USE_VERTEXAI }}'
          use_gemini_code_assist: '${{ vars.GOOGLE_GENAI_USE_GCA }}'
          settings: |-
            {
              "debug": ${{ fromJSON(env.DEBUG || env.ACTIONS_STEP_DEBUG || false) }},
              "maxSessionTurns": 50,
              "telemetry": {
                "enabled": false,
                "target": "gcp"
              }
            }
          prompt: ${{ steps.read_prompt.outputs.prompt }}

      - name: 'Create PR from issue changes'
        if: |-
          ${{ steps.get_context.outputs.is_pr == 'false' }}
        env:
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          ISSUE_NUMBER: '${{ steps.get_context.outputs.issue_number }}'
          DEFAULT_BRANCH: '${{ github.event.repository.default_branch }}'
          REPOSITORY: '${{ github.repository }}'
          GITHUB_WORKSPACE: '${{ github.workspace }}'
        run: |-
          set -euo pipefail

          BRANCH="issue/${ISSUE_NUMBER}/auto-pr"
          git fetch origin --prune

          # Create or switch to the working branch
          if git show-ref --verify --quiet "refs/heads/${BRANCH}"; then
            git checkout "${BRANCH}"
          else
            git checkout -b "${BRANCH}"
          fi

          # Commit local changes if present
          if [[ -n "$(git status --porcelain)" ]]; then
            git add -A
            git commit -m "🔧 chore: Auto changes for Issue #${ISSUE_NUMBER}"
          else
            echo "No local changes to commit."
          fi

          # Push branch (create or update)
          if git push -u origin "${BRANCH}"; then
            echo "Pushed branch ${BRANCH}"
          else
            echo "Initial push failed; attempting rebase and push..."
            git pull --rebase origin "${BRANCH}" || true
            git push -u origin "${BRANCH}" || git push -u --force-with-lease origin "${BRANCH}"
          fi

          # Create PR if one doesn't already exist
          PR_NUMBER=$(gh pr list --head "${BRANCH}" --state open --json number --jq '.[0].number' || true)
          if [[ -z "${PR_NUMBER}" ]]; then
            if [[ -f "${GITHUB_WORKSPACE}/response.md" ]]; then
              gh pr create \
                --head "${BRANCH}" \
                --base "${DEFAULT_BRANCH:-main}" \
                --title "🔧 Fixes #${ISSUE_NUMBER}: Apply requested changes" \
                --body-file "${GITHUB_WORKSPACE}/response.md"
            else
              PR_BODY_FILE=$(mktemp)
              cat > "${PR_BODY_FILE}" <<EOF
              ## 📋 AAR
              - 🎯 目的: Issue #${ISSUE_NUMBER} のリクエストへの対応PRを作成
              - ✅ 実施: ブランチ作成・変更のコミット/プッシュ・PR作成を自動実行
              - 🔍 差異: 特になし（自動化フローで標準対応）
              - 💡 学び: 自動PRフローの確認と安定動作
              - ▶️ 次のアクション: レビューとマージのご確認をお願いします

              関連: #${ISSUE_NUMBER}
              EOF
              gh pr create \
                --head "${BRANCH}" \
                --base "${DEFAULT_BRANCH:-main}" \
                --title "🔧 Fixes #${ISSUE_NUMBER}: Apply requested changes" \
                --body-file "${PR_BODY_FILE}"
            fi
            # Capture PR URL
            PR_URL=$(gh pr view --json url --jq .url)
            echo "Created PR: ${PR_URL}"
            AAR_COMMENT_FILE=$(mktemp)
            cat > "${AAR_COMMENT_FILE}" <<EOF
            🎉 PR を作成しました: ${PR_URL}

            ## 📋 AAR
            - 🎯 目的: Issue #${ISSUE_NUMBER} の対応PR作成
            - ✅ 実施: ブランチ(${BRANCH})作成・コミット/プッシュ・PR作成
            - ▶️ 次のアクション: レビューをお願いします
            EOF
            gh issue comment "${ISSUE_NUMBER}" --repo "${REPOSITORY}" --body-file "${AAR_COMMENT_FILE}"
          else
            echo "PR already exists: #${PR_NUMBER}"
            PR_URL=$(gh pr view "${PR_NUMBER}" --json url --jq .url)
            AAR_COMMENT_FILE=$(mktemp)
            cat > "${AAR_COMMENT_FILE}" <<EOF
            ℹ️ 既存のPRがあります: ${PR_URL}

            ## 📋 AAR
            - 🎯 目的: Issue #${ISSUE_NUMBER} の対応PR確認
            - ✅ 実施: 既存PR (#${PR_NUMBER}) を確認し、リンクを共有
            - ▶️ 次のアクション: レビューをお願いします
            EOF
            gh issue comment "${ISSUE_NUMBER}" --repo "${REPOSITORY}" --body-file "${AAR_COMMENT_FILE}"
          fi
